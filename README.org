#+TITLE:   My README for DOOM Emacs
#+AUTHOR: Kenneth Lawson
#+DESCRIPTION: The readme file for my doom emacs config
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+STARTUP: showeverything

* Table of Contents :toc:
- [[#description][Description]]
- [[#some-screen-shots][Some Screen shots]]
- [[#my-configuration-files][My Configuration Files]]
  - [[#disable-cl-depreciated-warning][Disable cl depreciated warning]]
  - [[#beacon][Beacon]]
  - [[#my-information][My Information]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#transparency][Transparency]]
  - [[#opacity][Opacity]]
  - [[#line-numbers][Line Numbers]]
  - [[#dashboard][Dashboard]]
  - [[#org-mode][Org-mode]]
  - [[#presentations][Presentations]]
  - [[#markdown][Markdown]]
  - [[#rss][RSS]]
  - [[#neotree][Neotree]]

* Description
This is my literate DOOM Emacs config I know its not much but its mine

* Some Screen shots
- Dashboard
  #+DESCRIPTION: This is my dashboard
  [[./screenshots/dashboard.png]]
- Code
  #+DESCRIPTION: a screenshot of my code
  [[./screenshots/code.png]]

* My Configuration Files
These are the changes that I have made over the time that I use Emacs
** Disable cl depreciated warning
 This old library is still used by some plugins and Emacs will tell you to stop using it.
 #+begin_src elisp
 (setq byte-compile-warnings '(cl-functions))
 #+end_src

** Beacon
 Never lose your cursor.
 - This is to help you from loosing your cursor when you are scrolling.
 #+begin_src elisp
 (setq beacon-mode 1) ;; enable beacon mode
 ;; Place your private configuration here! Remember, you do not need to run 'doom
 ;; sync' after modifying this file!
 #+end_src

** My Information
 This is so Emacs knows my name and email and will auto insert it if I want it to.
 #+begin_src elisp
 (setq user-full-name "Kenneth Lawson"
       user-mail-address "lawsonkenneth755@gmail.com")
 #+end_src

** Fonts
This is one of my favorite fonts to use its distinctive while not being distracting
#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
 (setq doom-font (font-spec :family "Hack Nerd Font" :size 14 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Hack Nerd Font" :size 16)
      projectile-project-search-path '("~/.dotfiles" "~/.doom.d" "~/Dropbox/Projects"))
#+end_src

** Theme
I mainly use Dracula theme because I like the colors but I have been enjoying tokyo night.
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'catppuccin)
#+end_src

** Transparency
With Emacs 29 they finally added true transparency I realized I don't like this
#+begin_src elisp
;; (add-to-list 'default-frame-alist '(alpha-background . 40))
#+end_src

** Opacity
I do not really know if I will like make it work let alone keep this
#+begin_src elisp
(set-frame-parameter (selected-frame) 'alpha '(35 . 35)) (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src
** Line Numbers
I use relative line Numbers for quick jumps while coding.
#+begin_src elisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
#+end_src

** Dashboard
I am well aware that I don't need to use dashboard however I enjoy the splash screen.
- I have a custom icon from the internet
- and a message on the bottom of Emacs.
#+begin_src elisp
(add-hook! '+doom-dashboard-functions :append
  (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered by Emacs!")))

(setq fancy-splash-image (concat doom-private-dir "doomEmacsDracula.svg"))
#+end_src

** Org-mode
These are just a handful of changes to orgmode as most of the changes are from extensions.
*** Timer
A little bell for the timer built into Emacs org-mode.
- I found the bell sound online.
#+begin_src elisp
(require 'org)
(setq org-clock-sound "~/.doom.d/bell.wav")
#+end_src
*** Org directory
Changed the default location of my org directory to be in my Dropbox so it will auto backup.
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org/")
#+end_src
*** Change headings meta levels
This allows me to move headings and there content around a document.
#+begin_src elisp

(after! org
       (map! :map org-mode-map
             :n "M-J" #'org-metadown
             :n "M-k" #'org-metaup))

#+end_src
*** Org Superstar
#+begin_src elisp
(add-hook 'org-mode-hook
          (lambda ()
            (org-superstar-mode 1)))
#+end_src
*** Journal
This is for my journal that I use for notes and some free-writing.
#+begin_src elisp
(setq org-journal-dir "~/Dropbox/org/journal/"
      org-journal-date-prefix "#+TITLE: "
      org-journal-time-prefix "* "
      org-journal-date-format "%a, %Y-%m-%d"
      org-journal-file-format "%Y-%m-%d.org")
#+end_src
*** Org fonts
An interactive function for attributes for header fonts sizes and colors within Org-mode
#+begin_src elisp
(defun org-colors-dracula ()
  "Enable Dracula colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#8be9fd" ultra-bold)
         (org-level-2 1.6 "#bd93f9" extra-bold)
         (org-level-3 1.5 "#50fa7b" bold)
         (org-level-4 1.4 "#ff79c6" semi-bold)
         (org-level-5 1.3 "#9aedfe" normal)
         (org-level-6 1.2 "#caa9fa" normal)
         (org-level-7 1.1 "#5af78e" normal)
         (org-level-8 1.0 "#ff92d0" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))
#+end_src
*** Org-roam
Second brain with orgmode
#+begin_src elisp
(setq org-roam-directory "~/Dropbox/org/roam")
#+end_src
*** Org-agenda
This is mainly for a TODO list
#+begin_src elisp
 (after! org
   (setq org-agenda-files '("~/Dropbox/org/agenda.org")))

 (setq
    org-fancy-priorities-list '("ðŸŸ¥" "ðŸŸ§" "ðŸŸ¨")
    org-priority-faces
    '((?A :foreground "#ff6c6b" :weight bold)
      (?B :foreground "#98be65" :weight bold)
      (?C :foreground "#c678dd" :weight bold))
    org-agenda-block-separator 8411)

 (setq org-agenda-custom-commands
       '(("v" "A better agenda view"
          ((tags "PRIORITY=\"A\""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "High-priority unfinished tasks:")))
           (tags "PRIORITY=\"B\""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
           (tags "PRIORITY=\"C\""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "Low-priority unfinished tasks:")))
           (tags "customtag"
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "Tasks marked with customtag:")))

           (agenda "")
           (alltodo "")))))
#+end_src
*** LaTeX export variables
These are for exporting you org files into pdf's through [[https://www.latex-project.org/][LaTeX]]
I am planning on working on getting a good manuscript setup for this
#+begin_src elisp
(setq org-latex-pdf-process
      '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))



(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
             '("novel"
               "\\documentclass[novel,geometry,letterpaper,courier]{sffms}
               \\surname{Lawson}
               \\address{Address redacted\u005C\u005C email: koodog@gmail.com}
               \\disposable
       [NO-DEFAULT-PACKAGES]
       [NO-PACKAGES]"
               ("\\chapter{%s}" . "\\chapter{%s}" )))

(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass[11pt,a4paper]{article}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{fixltx2e}
\\usepackage{graphicx}
\\usepackage{longtable}
\\usepackage{float}
\\usepackage{wrapfig}
\\usepackage{rotating}
\\usepackage[normalem]{ulem}
\\usepackage{amsmath}
\\usepackage{textcomp}
\\usepackage{marvosym}
\\usepackage{wasysym}
\\usepackage{amssymb}
\\usepackage{hyperref}
\\usepackage{mathpazo}
\\usepackage{color}
\\usepackage{enumerate}
\\definecolor{bg}{rgb}{0.95,0.95,0.95}
\\tolerance=1000
      [NO-DEFAULT-PACKAGES]
      [PACKAGES]
      [EXTRA]
\\linespread{1.1}
\\hypersetup{pdfborder=0 0 0}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")))


(add-to-list 'org-latex-classes '("ebook"
                                  "\\documentclass[11pt, oneside]{memoir}
\\setstocksize{9in}{6in}
\\settrimmedsize{\\stockheight}{\\stockwidth}{*}
\\setlrmarginsandblock{2cm}{2cm}{*} % Left and right margin
\\setulmarginsandblock{2cm}{2cm}{*} % Upper and lower margin
\\checkandfixthelayout
% Much more laTeX code omitted
"
                                  ("\\chapter{%s}" . "\\chapter*{%s}")
                                  ("\\section{%s}" . "\\section*{%s}")
                                  ("\\subsection{%s}" . "\\subsection*{%s}")))
#+end_src
*** Org-auto-tangle
This will auto tangle any org file that you want to auto tangle
#+begin_src elisp
;; (use-package! org-auto-tangle
  ;; :defer t
  ;; :hook (org-mode . org-auto-tangle-mode)
  ;; :config
  ;; (setq org-auto-tangle-default f))
#+end_src

** Presentations
*** org-presents
[[https://github.com/rlister/org-present][org-present github]]
#+begin_src elisp
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+end_src

** Markdown
Variable Markdown header sizes
#+begin_src elisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.8))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.2)))))
#+end_src

** RSS
I use elfeed which is a RSS reader in Emacs
with the main feeds that I use.
#+begin_src elisp
(require 'elfeed-goodies)
(global-set-key (kbd "C-x w") 'elfeed)
(elfeed-goodies/setup)
(setq elfeed-goodies/entry-pane-size 0.5)
#+end_src

** Neotree
This is a tree viewer that is reminiscent to those built into IDE's
#+begin_src elisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)
#+end_src
